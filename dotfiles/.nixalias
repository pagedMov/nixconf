#!/run/current-system/sw/bin/bash


nix_search () {
	# instead of the builtin nixpkgs search, run through a cached list of packages
	echo "$(cat ~/bin/packages.list)" | grep "$1" | awk '{print $1}'
}
nix_install () {
	if [ -z $1 ]; then echo "input a package name"
	elif sudo grep -q "$1" /home/shade/.config/home-manager/pack/homepack.nix; then
		echo "package already installed"
	else
		sed -i "/^\]/i$1" "/home/shade/.config/home-manager/pack/homepack.nix"
		echo "added $1 to pack.txt, rebuild? (y/n)"
		rebuildprompt
	fi
}
nix_install_font () {
	if [ -z $1 ]; then echo "input a package name"
	elif sudo grep -q "$1" /home/shade/.config/home-manager/pack/fontpack.nix; then
		echo "package already installed"
	else
		sed -i "/^\]/i$1" "/home/shade/.config/home-manager/pack/fontpack.nix"
		echo "added $1 to fontpack.txt, rebuild? (y/n)"
		rebuildprompt
	fi
}
nix_pip () {
	if [ -z "$1" ]; then
		echo "Input a Python package name"
	elif grep -q "$1" /home/shade/.config/home-manager/pack/pypack.nix; then
		echo "Python package already installed"
	else
		sed -i "/^  ]);/i\    $1" "/home/shade/.config/home-manager/pack/pypack.nix"
		echo "Added $1 to pypack.nix, rebuild? (y/n)"
		rebuildprompt
	fi
}
nix_find_path () {
	# easier way to find stuff
	sudo find / -name "$1"
}
nix_remove () {
	# take a package name as an arg
	# remove package from package list
	# ask to rebuild
	sed -i "/$1/d" /home/shade/.config/home-manager/pack/homepack.nix
	echo "$1 removed from homepack.nix"
	echo "rebuild? (y/n)"
	rebuildprompt
}
nix_rebuild () {
	# take a commit message as an arg
	# rebuild the nixos system, then push changes to github
	if [ "$#" -eq 0 ]; then
		echo "Please provide a commit message"
		return 1
	fi
	message="$1"
	sudo nixos-rebuild switch && \
	generation=$(sudo nix-env -p /nix/var/nix/profiles/system --list-generations | grep "(current)" | awk '{print $1}') && \
	sudo sed -i "s/^  configGeneration = \".*\";/  configGeneration = \"$generation\";/" "/etc/nixos/configuration.nix" && \
	sudo rsync -avh --delete /etc/nixos/ /home/shade/.config/home-manager/nixsys && \
	prevdir="$PWD" && \
	cd /home/shade/.config/home-manager/ && \
	find . -type f -name "*.swp" -exec sudo rm -r {} + && \
	find . -type f -name "*.swo" -exec sudo rm -r {} + && \
	if [ "$2" == "--nopush" ];
		return 0
	fi
	git add . && \
	git commit -m "$message" && \
	git push && \
	cd "$prevdir"
}
rebuildprompt () {
	undecided=true; while $undecided; do read yn
	if [ $yn == "y" ]; then
		echo "rebuilding..."
		sleep 1
		home-manager switch
		undecided=false
		echo " "
		echo "rebuild complete."
	elif [ $yn == "n" ]; then
		echo "exiting without rebuilding."
		return 1
	else
		echo "input y or n"
	fi
done
}
nix_installed () {
	if [ -n "$1" ] && [ $1 == "open" ]; then
		nvim /home/shade/.config/home-manager/pack/homepack.nix
		return 0
	elif [ -n "$1" ] && [ $1 != "open" ]; then
		echo "invalid option"
		return 1
	else
		cat /home/shade/.config/home-manager/pack/homepack.nix
	fi
}
nix_help () {
	echo
	echo "--- config commands ---" \
		&& echo "nixconf - edit system config" \
		&& echo "nixhardconf - edit hardware config" \
		&& echo "shadeconf - edit home-manager config" \
		&& echo "nixfind - find path to command" \
		&& echo "nixrebuild - rebuild nixos system" \
		&& echo "shaderebuild - rebuild home-manager config" \
		&& echo \
		&& echo "--- package commands ---" \
		&& echo "nixsearch <pkg> - search for a package" \
		&& echo "nixinstalled <?open> - list installed packages, or open pack.nix with \"open\" arg" \
		&& echo "nixinstall <pkg> - install a package" \
		&& echo "nixinstallfont <pkg> - install a font" \
		&& echo "nixpip <pkgs> - install a python lib" \
		&& echo "nixremove <pkg> - remove a package" \
		&& echo "nixhelp - show this message"
	}

		alias nixconf="sudo -E neovide /etc/nixos/configuration.nix"

		alias shadeconf="home-manager edit"

		alias nixhardconf="sudo nvim /etc/nixos/hardware-configuration.nix"

		alias nixsearch=nix_search

		alias shaderebuild="home-manager switch"

		alias nixrebuild=nix_rebuild

		alias nixinstall=nix_install

		alias nixinstallfont=nix_install_font

		alias nixremove=nix_remove

		alias nixfind=nix_find_path

		alias nixpip=nix_pip

		alias nixinstalled=nix_installed

		alias nixhelp=nix_help

		alias rebuildall="shaderebuild && nixrebuild"
		
		alias updatenixlist="nix-env -qaP > ~/bin/packages.list"
