#!/run/current-system/sw/bin/bash

# Functions
nix_update() {
	prevdir="$PWD"
	cd ~/.config/home-manager
	git fetch
	LOCAL=$(git rev-parse @)
	REMOTE=$(git rev-parse @{u})
	if [ $LOCAL == $REMOTE ]; then
		echo "No updates available"
		return 0
	else
		git pull \
		&& sudo rsync -r ./nixsys/ /etc/nixos/ \
		&& home-manager switch \
		&& sudo nixos-rebuild switch \
		&& source $BASHRC \
		&& echo "Update complete" \
		&& cd $prevdir
	fi
	
}
nix_search () {
	# instead of the builtin nixpkgs search, run through a cached list of packages
	list="$(cat ~/bin/packages.list | grep $1 | awk '{print $1}')"
	if [ ! -f "$HOME/bin/packages.list" ] || [ ! -s "$HOME/bin/packages.list" ]; then
		echo "Cached package list not found. Try updatenixlist"
		return 1;
	else
		echo $list
	fi
}
home_install () {
    if [ -z "$1" ]; then
        echo "Input a package name"
    elif sudo grep -q "$1" $HM_DIR/hm-modules/machine-settings.nix; then
        echo "Package already installed"
    else
        sudo sed -i "/home.packages = with pkgs; \[/ a \ \ \ \ $1" $HM_DIR/hm-modules/machine-settings.nix
        echo "Added $1 to machine-specific.nix, rebuild? (y/n)"
        rebuildprompt
    fi
}
nix_install () {
    if [ -z "$1" ]; then
        echo "Input a package name"
    elif sudo grep -q "$1" /etc/nixos/modules/hardware-specific.nix; then
        echo "Package already installed"
    else
        sudo sed -i "/environment.systemPackages = with pkgs; \[/ a \ \ \ \ $1" /etc/nixos/modules/hardware-specific.nix
        echo "Added $1 to hardware-specific.nix, rebuild? (y/n)"
        rebuildprompt
    fi
}
nix_pip () {
	if [ -z "$1" ]; then
		echo "Input a Python package name"
	elif grep -q "$1" ~/.config/home-manager/pack/pypack.nix; then
		echo "Python package already installed"
	else
		sed -i "/^  ]);/i\    $1" "$HOME/.config/home-manager/pack/pypack.nix"
		echo "Added $1 to pypack.nix, rebuild? (y/n)"
		rebuildprompt
	fi
}
nix_find_path () {
	# easier way to find stuff
	sudo find / -name "$1"
}
nix_remove () {
	# take a package name as an arg
	# remove package from package list
	# ask to rebuild
	sed -i "/$1/d" ~/.config/home-manager/pack/machinepack.nix
	echo "$1 removed from machinepack.nix"
	echo "rebuild? (y/n)"
	rebuildprompt
}
nix_rebuild () {
	# take a commit message as an arg
	# rebuild the nixos system, then push changes to github
	sudo nixos-rebuild switch && \
	generation="$(sudo nix-env -p /nix/var/nix/profiles/system --list-generations | grep "(current)" | awk '{print $1}')" && \
	echo "Created config generation $generation"
	sudo sed -i "s/^  configGeneration = \".*\";/  configGeneration = \"$generation\";/" "/etc/nixos/configuration.nix" && \
	sudo rsync -avh --delete /etc/nixos/ ~/.config/home-manager/nixsys && \
	prevdir="$PWD" && \
	cd ~/.config/home-manager/ && \
	find . -type f -name "*.swp" -exec sudo rm -r {} + && \
	find . -type f -name "*.swo" -exec sudo rm -r {} + && \
	if [ "$#" == 0 ]; then
		echo "No commit message provided. Exiting without pushing changes."
		cd "$prevdir"
		return 0
	fi
	message="$1"
	git add . && \
	git commit -m "$message" && \
	git push && \
	cd "$prevdir"
}
rebuild_all () {
	echo && echo "Rebuilding home-manager configuration..." \
	&& home-manager switch \
	&& echo && echo "Rebuilding system configuration..." \
	&& nix_rebuild $1 \
	&& echo && echo "Backing up local configurations..." \
	&& backup_configs
}
rebuildprompt () {
	undecided=true; while $undecided; do read yn
	if [ $yn == "y" ]; then
		echo "rebuilding..."
		sleep 1
		home-manager switch \
		&& sudo nixos-rebuild switch
		undecided=false
		echo " "
		echo "rebuild complete."
	elif [ $yn == "n" ]; then
		echo "exiting without rebuilding."
		return 1
	else
		echo "input y or n"
	fi
done
}
backup_configs () {
    local ip="$(ip -4 addr show $(ip route show default | awk '/default/ {print $5}') | awk '/inet / {print $2}' | cut -d/ -f1)"
    local local_user="$(cat $HM_DIR/.user)"
    local server_user="pagedmov"
    local server_address="192.168.1.206"
    local destination_path="/home/pagedmov/backup/$local_user"

    ping -c 1 -W 1 $server_address | grep -q "100% packet loss"
    retries=0
    if [ $? -ne 0 ]; then
        while true; do
            echo "Connection failed."
            if [ $retries -eq 4 ]; then
                echo "Connection failed after 4 retries. Aborting backup."
                return 1
            else
                retries=$((retries + 1))
                echo "Retrying... (Attempt #$retries)"
                ping -c 1 -W 1 $server_address | grep -q "100% packet loss"
                if [ $? -ne 0 ]; then
                    break
                else
                    sleep 1
                    continue
                fi
            fi
        done
    fi

	echo "Found server."
    ssh ${server_user}@${server_address} "mkdir -p $destination_path"
    ssh ${server_user}@${server_address} "mkdir -p $destination_path/sys"
    ssh ${server_user}@${server_address} "mkdir -p $destination_path/home"
    scp "/etc/nixos/modules/hardware-specific.nix" "${server_user}@${server_address}:${destination_path}/sys"
    scp "$HM_DIR/hm-modules/machine-settings.nix" "${server_user}@${server_address}:${destination_path}/home"
    echo "Server backup complete"
}
nix_help () {
	echo
	echo "A question mark in the argument means it's optional'"
	echo "--- config commands ---" \
	&& echo "nixconf - edit system config" \
	&& echo "nixhardconf - edit hardware config" \
	&& echo "nixmachconf - edit machine-specific config" \
	&& echo "shadeconf - edit home-manager config" \
	&& echo "nixfind - find path to command" \
	&& echo "nixrebuild - rebuild nixos system" \
	&& echo "homerebuild - rebuild home-manager config" \
	&& echo "nixupdate - pull new config version from github and rebuild the user and system environments to reflect changes" \
	&& echo "rebuildall <?commit msg> - rebuild home-manager and nixos, then commit changes to github if a commit msg is provided" \
	&& echo \
	&& echo "--- package commands ---" \
	&& echo "nixsearch <pkg> - search for a package" \
	&& echo "nixinstall <pkg> - install a system package" \
	&& echo "homeinstall <pkg> - install a user package" \
	&& echo "nixpip <pkgs> - install a python lib" \
	&& echo "nixremove <pkg> - remove a package" \
	&& echo "nixhelp - show this message" \
	&& echo "updatenixlist - update cached list of nix packages"
	}

# Aliases
alias nixconf="sudo -E neovide /etc/nixos/configuration.nix"

alias homeconf="home-manager edit"

alias shadeconf="nvim $HOME/.config/home-manager/hm-modules/machine-settings.nix"

alias nixhardconf="sudo -E neovide /etc/nixos/hardware-configuration.nix"

alias nixmachconf="sudo -E neovide /etc/nixos/modules/hardware-specific.nix"

alias nixsearch=nix_search

alias homerebuild="home-manager switch"

alias nixrebuild=nix_rebuild

alias homeinstall=home_install

alias nixinstall=nix_install

alias nixremove=nix_remove

alias nixfind=nix_find_path

alias nixpip=nix_pip

alias nixhelp=nix_help

alias rebuildall=rebuild_all

alias updatenixlist="nix-env -qaP > $HOME/bin/packages.list"

alias nixbackup=backup_configs

alias nixupdate=nix_update
